document.addEventListener('DOMContentLoaded', function() {
    loadNetworkNodes(); // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —É–∑–ª—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    loadProducts();
    setupEventListeners();
});

let networkNodes = []; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É–∑–ª–æ–≤ —Å–µ—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
function loadNetworkNodes() {
    fetch('/api/network-nodes/')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            networkNodes = data.results || data;
            populateNodeFilter();
        })
        .catch(error => {
            console.error('Error loading network nodes:', error);
        });
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —É–∑–ª–æ–≤
function populateNodeFilter() {
    const nodeFilter = document.getElementById('node-filter');

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
    while (nodeFilter.children.length > 1) {
        nodeFilter.removeChild(nodeFilter.lastChild);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –≤ —Ñ–∏–ª—å—Ç—Ä
    networkNodes.forEach(node => {
        const option = document.createElement('option');
        option.value = node.id;
        option.textContent = `${node.name} (${getNodeTypeDisplay(node.node_type)})`;
        nodeFilter.appendChild(option);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function loadProducts(filters = {}) {
    const loadingElement = document.getElementById('loading-message');
    const noDataElement = document.getElementById('no-products-message');
    const productsContainer = document.getElementById('products-container');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    loadingElement.style.display = 'block';
    noDataElement.style.display = 'none';
    productsContainer.innerHTML = '';

    // –°—Ç—Ä–æ–∏–º URL —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    let url = '/api/products/';
    const params = new URLSearchParams();

    if (filters.search) {
        params.append('search', filters.search);
    }

    if (params.toString()) {
        url += '?' + params.toString();
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —É–∑–µ–ª –≤ —Ñ–∏–ª—å—Ç—Ä–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —É–∑–ª—É
            if (filters.node_id) {
                data = filterProductsByNode(data, filters.node_id);
            }
            displayProducts(data.results || data);
        })
        .catch(error => {
            console.error('Error loading products:', error);
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        })
        .finally(() => {
            loadingElement.style.display = 'none';
        });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —É–∑–ª—É —Å–µ—Ç–∏
function filterProductsByNode(products, nodeId) {
    return products.filter(product => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —É–∑–ª–µ
        if (product.network_nodes && product.network_nodes.length > 0) {
            return product.network_nodes.some(node => node.node_id == nodeId);
        }
        return false;
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function displayProducts(products) {
    const productsContainer = document.getElementById('products-container');
    const noDataElement = document.getElementById('no-products-message');

    if (!products || products.length === 0) {
        noDataElement.style.display = 'block';
        productsContainer.innerHTML = '';
        return;
    }

    noDataElement.style.display = 'none';

    productsContainer.innerHTML = products.map(product => `
        <div class="product-card">
            <div class="product-header">
                <div class="product-name">${escapeHtml(product.name)}</div>
                <div class="product-model">${escapeHtml(product.model)}</div>
            </div>
            <div class="product-details">
                <div class="product-detail">
                    <i>üìÖ</i> –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: ${formatDate(product.release_date)}
                </div>
                <div class="product-detail">
                    <i>üÜî</i> ID: ${product.id}
                </div>
            </div>

            ${product.network_nodes && product.network_nodes.length > 0 ? `
            <div class="product-nodes">
                <h4>–î–æ—Å—Ç—É–ø–µ–Ω –≤ —É–∑–ª–∞—Ö:</h4>
                <div class="nodes-list">
                    ${product.network_nodes.slice(0, 3).map(node => `
                        <div class="node-item">
                            <div class="node-info">
                                ${escapeHtml(node.node_name)}
                                ${node.is_available ? '‚úÖ' : '‚ùå'}
                            </div>
                            <div class="node-price">${parseFloat(node.price || 0).toFixed(2)} ‚ÇΩ</div>
                        </div>
                    `).join('')}
                    ${product.network_nodes.length > 3 ? `
                        <div class="node-item">
                            <div class="node-info">... –∏ –µ—â–µ ${product.network_nodes.length - 3} —É–∑–ª–æ–≤</div>
                        </div>
                    ` : ''}
                </div>
            </div>
            ` : `
            <div class="product-nodes">
                <p style="color: #95a5a6; font-style: italic;">–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —É–∑–ª–µ</p>
            </div>
            `}

            <div class="product-actions">
                <button class="action-btn view" onclick="viewProductDetails(${product.id})">
                    –ü—Ä–æ—Å–º–æ—Ç—Ä
                </button>
                <button class="action-btn assign" onclick="assignProductToNode(${product.id})">
                    –ù–∞–∑–Ω–∞—á–∏—Ç—å —É–∑–ª—É
                </button>
            </div>
        </div>
    `).join('');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getNodeTypeDisplay(nodeType) {
    const types = {
        'factory': '–ó–∞–≤–æ–¥',
        'retail': '–†–æ–∑–Ω–∏—á–Ω–∞—è —Å–µ—Ç—å',
        'entrepreneur': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'
    };
    return types[nodeType] || nodeType;
}

function escapeHtml(unsafe) {
    if (unsafe === null || unsafe === undefined) return '';
    return unsafe
        .toString()
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
    document.getElementById('apply-filters').addEventListener('click', function() {
        applyFilters();
    });

    // –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å"
    document.getElementById('reset-filters').addEventListener('click', function() {
        resetFilters();
    });

    // –ü–æ–∏—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
    document.getElementById('search-filter').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            applyFilters();
        }
    });

    // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.getElementById('node-filter').addEventListener('change', function() {
        applyFilters();
    });
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilters() {
    const filters = {
        search: document.getElementById('search-filter').value.trim(),
        node_id: document.getElementById('node-filter').value
    };

    loadProducts(filters);
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
function resetFilters() {
    document.getElementById('search-filter').value = '';
    document.getElementById('node-filter').value = '';
    loadProducts();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    const productsContainer = document.getElementById('products-container');
    const noDataElement = document.getElementById('no-products-message');

    productsContainer.innerHTML = '';
    noDataElement.textContent = message;
    noDataElement.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
function viewProductDetails(productId) {
    fetch(`/api/products/${productId}/`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Product not found');
            }
            return response.json();
        })
        .then(product => {
            showProductModal(product);
        })
        .catch(error => {
            console.error('Error loading product details:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞');
        });
}

function assignProductToNode(productId) {
    if (networkNodes.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∑–ª—ã —Å–µ—Ç–∏');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    const nodeList = networkNodes.map(node =>
        `${node.id}. ${node.name} (${getNodeTypeDisplay(node.node_type)})`
    ).join('\n');

    const nodeId = prompt(`–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —É–∑–ª—É —Å–µ—Ç–∏. –í–≤–µ–¥–∏—Ç–µ ID —É–∑–ª–∞:\n\n${nodeList}`);

    if (nodeId && !isNaN(nodeId)) {
        const price = prompt('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —ç—Ç–æ–º —É–∑–ª–µ:');
        if (price && !isNaN(price)) {
            assignProductToNodeAPI(productId, parseInt(nodeId), parseFloat(price));
        }
    }
}

function assignProductToNodeAPI(productId, nodeId, price) {
    const data = {
        product_id: productId,
        price: price,
        quantity: 1,
        is_available: true
    };

    fetch(`/api/network-nodes/${nodeId}/add-product/`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCSRFToken()
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (response.status === 403) {
            throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.');
        }
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(result => {
        alert('–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω —É–∑–ª—É!');
        loadProducts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    })
    .catch(error => {
        console.error('Error assigning product:', error);
        alert('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —É–∑–ª—É: ' + error.message);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
function getCSRFToken() {
    const name = 'csrftoken';
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞
function showProductModal(product) {
    const modal = document.getElementById('product-modal');
    const modalContent = document.getElementById('modal-content');

    modalContent.innerHTML = `
        <h3>${escapeHtml(product.name)}</h3>
        <div class="modal-details">
            <div class="modal-detail">
                <span class="detail-label">–ú–æ–¥–µ–ª—å:</span>
                <span class="detail-value">${escapeHtml(product.model)}</span>
            </div>
            <div class="modal-detail">
                <span class="detail-label">–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:</span>
                <span class="detail-value">${formatDate(product.release_date)}</span>
            </div>
            <div class="modal-detail">
                <span class="detail-label">ID:</span>
                <span class="detail-value">${product.id}</span>
            </div>
            <div class="modal-detail">
                <span class="detail-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                <span class="detail-value">${formatDate(product.created_at)}</span>
            </div>
        </div>

        ${product.network_nodes && product.network_nodes.length > 0 ? `
        <div class="modal-section">
            <h4>–î–æ—Å—Ç—É–ø–µ–Ω –≤ —É–∑–ª–∞—Ö:</h4>
            <div class="nodes-list-modal">
                ${product.network_nodes.map(node => `
                    <div class="node-item-modal">
                        <div class="node-info-modal">
                            <strong>${escapeHtml(node.node_name)}</strong>
                            <br>
                            <small>${getNodeTypeDisplay(getNodeTypeById(node.node_id))} ‚Ä¢ ${node.is_available ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}</small>
                        </div>
                        <div class="node-details-modal">
                            <div>–¶–µ–Ω–∞: ${parseFloat(node.price || 0).toFixed(2)} ‚ÇΩ</div>
                            <div>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${node.quantity || 0} —à—Ç.</div>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
        ` : `
        <div class="modal-section">
            <p style="color: #95a5a6; font-style: italic;">–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —É–∑–ª–µ —Å–µ—Ç–∏</p>
        </div>
        `}
    `;

    modal.style.display = 'block';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–∑–ª–∞ –ø–æ ID
function getNodeTypeById(nodeId) {
    const node = networkNodes.find(n => n.id == nodeId);
    return node ? node.node_type : 'unknown';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('product-modal');
    const closeBtn = document.querySelector('.close');

    if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            modal.style.display = 'none';
        });
    }

    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
});
